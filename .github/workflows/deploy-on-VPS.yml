name: D√©ploiement Production sur Backlog

on:
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write
  deployments: write

jobs:
  deploy-production:
    if: github.event.label.name == 'backlog'
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. Merge dev vers production
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge dev into production
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git checkout production
          git merge --no-ff dev -m "Merge dev into production (Issue #${{ github.event.issue.number }})"
          git push origin production

      # 2. D√©ploiement sur le VPS
      - name: SSH Deployment
        uses: appleboy/ssh-action@v1
        with:
          host: 79.137.33.245
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/SP-CESIZen
            echo "Mise √† jour du d√©p√¥t..."
            git fetch origin
            git checkout production
            git pull origin production
            
            echo "Arr√™t des containers..."
            docker-compose down
            
            echo "Rebuild et red√©marrage des containers..."
            docker-compose up -d --build
            
            echo "Nettoyage Docker..."
            docker system prune -f
            
            echo "üî• D√©ploiement termin√© avec succ√®s !"

      # 3. Mise √† jour de l'issue
      - name: Update Issue Status
        if: success()  # Ne s'ex√©cute que si les √©tapes pr√©c√©dentes r√©ussissent
        uses: actions/github-script@v6
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        with:
          script: |
            try {
              // Fermer l'issue et mettre √† jour les labels
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.ISSUE_NUMBER,
                state: 'closed',
                labels: ['deployed']
              });
      
              // Ajouter un commentaire
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.ISSUE_NUMBER,
                body: `‚úÖ D√©ploy√© en production !\n\n` +
                      `- Commit: ${process.env.GITHUB_SHA}\n` +
                      `- Date: ${new Date().toISOString()}`
              });
            } catch (error) {
              console.error('Erreur lors de la mise √† jour de l\'issue:', error);
            }
